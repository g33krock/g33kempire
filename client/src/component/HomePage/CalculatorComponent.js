import React from "react";
import { Container, Row, Col, Form, Button } from "react-bootstrap";
import jQuery from "jquery";

export const Calculator = (props) => {
  // const [showMore, setShowMore] = React.useState(true);
  // const switchShowMore = () => {
  //   setShowMore(false);
  //   console.log(showMore);
  // };

  var lumpRatios = {
    leverage: {
      8: [
        0.0, 0.0, 1.0, 2.04, 3.12, 4.25, 5.42, 6.63, 7.9, 9.21, 10.58, 12.01,
        13.49, 15.03, 16.63, 18.29, 20.02, 21.82, 23.7, 25.65, 27.67, 29.78,
        31.97, 34.25, 36.62, 39.08, 41.65, 44.31, 47.08, 49.97, 52.97, 56.08,
        59.33, 62.7, 66.21, 69.86, 73.65, 77.6, 81.7, 85.97, 90.41, 95.03,
        99.83, 104.82, 110.01, 115.41, 121.03, 126.87, 132.95, 139.26, 145.83,
        152.67, 159.77, 167.16, 174.85, 182.85, 191.16, 199.81, 208.8, 218.15,
        227.88, 237.99, 248.51, 259.45, 270.83, 282.66, 294.97, 307.77, 321.08,
        334.92, 349.32, 364.29, 379.86,
      ],
      18: [
        0.0, 0.0, 1.0, 2.04, 3.12, 4.25, 5.42, 6.63, 7.9, 9.21, 10.58, 12.01,
        13.49, 15.03, 16.63, 18.29, 20.02, 21.82, 23.7, 25.65, 27.67, 29.78,
        31.97, 34.25, 36.62, 39.08, 41.65, 44.31, 47.08, 49.97, 52.97, 56.08,
        59.33, 62.7, 66.21, 69.86, 73.65, 77.6, 81.7, 85.97, 90.41, 95.03,
        99.83, 104.82, 110.01, 115.41, 121.03, 126.87, 132.95, 139.26, 145.83,
        152.67, 159.77, 167.16, 174.85, 182.85, 191.16, 199.81, 208.8, 218.15,
        227.88, 237.99, 248.51, 259.45, 270.83, 282.66, 294.97, 307.77, 321.08,
        334.92, 349.32, 364.29, 379.86,
      ],
      25: [
        0.0, 0.0, 1.0, 2.04, 3.12, 4.25, 5.42, 6.63, 7.9, 9.21, 10.58, 12.01,
        13.49, 15.03, 16.63, 18.29, 20.02, 21.82, 23.7, 25.65, 27.67, 29.78,
        31.97, 34.25, 36.62, 39.08, 41.65, 44.31, 47.08, 49.97, 52.97, 56.08,
        59.33, 62.7, 66.21, 69.86, 73.65, 77.6, 81.7, 85.97, 90.41, 95.03,
        99.83, 104.82, 110.01, 115.41, 121.03, 126.87, 132.95, 139.26, 145.83,
        152.67, 159.77, 167.16, 174.85, 182.85, 191.16, 199.81, 208.8, 218.15,
        227.88, 237.99, 248.51, 259.45, 270.83, 282.66,
      ],
      30: [
        0.0, 0.0, 1.0, 2.04, 3.12, 4.25, 5.42, 6.63, 7.9, 9.21, 10.58, 12.01,
        13.49, 15.03, 16.63, 18.29, 20.02, 21.82, 23.7, 25.65, 27.67, 29.78,
        31.97, 34.25, 36.62, 39.08, 41.65, 44.31, 47.08, 49.97, 52.97, 56.08,
        59.33, 62.7, 66.21, 69.86, 73.65, 77.6, 81.7, 85.97, 90.41, 95.03,
        99.83, 104.82, 110.01, 115.41, 121.03, 126.87, 132.95, 139.26, 145.83,
        152.67, 159.77, 167.16, 174.85, 182.85, 191.16, 199.81, 208.8, 218.15,
        227.88,
      ],
      35: [
        0.0, 0.0, 1.0, 2.04, 3.12, 4.25, 5.42, 6.63, 7.9, 9.21, 10.58, 12.01,
        13.49, 15.03, 16.63, 18.29, 20.02, 21.82, 23.7, 25.65, 27.67, 29.78,
        31.97, 34.25, 36.62, 39.08, 41.65, 44.31, 47.08, 49.97, 52.97, 56.08,
        59.33, 62.7, 66.21, 69.86, 73.65, 77.6, 81.7, 85.97, 90.41, 95.03,
        99.83, 104.82, 110.01, 115.41, 121.03, 126.87, 132.95, 139.26, 145.83,
        152.67, 159.77, 167.16, 174.85, 182.85,
      ],
      40: [
        0.0, 0.0, 1.0, 2.04, 3.12, 4.25, 5.42, 6.63, 7.9, 9.21, 10.58, 12.01,
        13.49, 15.03, 16.63, 18.29, 20.02, 21.82, 23.7, 25.65, 27.67, 29.78,
        31.97, 34.25, 36.62, 39.08, 41.65, 44.31, 47.08, 49.97, 52.97, 56.08,
        59.33, 62.7, 66.21, 69.86, 73.65, 77.6, 81.7, 85.97, 90.41, 95.03,
        99.83, 104.82, 110.01, 115.41, 121.03, 126.87, 132.95, 139.26, 145.83,
      ],
      45: [
        0.0, 0.0, 1.0, 2.04, 3.12, 4.25, 5.42, 6.63, 7.9, 9.21, 10.58, 12.01,
        13.49, 15.03, 16.63, 18.29, 20.02, 21.82, 23.7, 25.65, 27.67, 29.78,
        31.97, 34.25, 36.62, 39.08, 41.65, 44.31, 47.08, 49.97, 52.97, 56.08,
        59.33, 62.7, 66.21, 69.86, 73.65, 77.6, 81.7, 85.97, 90.41, 95.03,
        99.83, 104.82, 110.01, 115.41,
      ],
      50: [
        0.0, 0.0, 1.0, 2.04, 3.12, 4.25, 5.42, 6.63, 7.9, 9.21, 10.58, 12.01,
        13.49, 15.03, 16.63, 18.29, 20.02, 21.82, 23.7, 25.65, 27.67, 29.78,
        31.97, 34.25, 36.62, 39.08, 41.65, 44.31, 47.08, 49.97, 52.97, 56.08,
        59.33, 62.7, 66.21, 69.86, 73.65, 77.6, 81.7, 85.97, 90.41,
      ],
      55: [
        0.0, 0.0, 1.0, 2.04, 3.12, 4.25, 5.42, 6.63, 7.9, 9.21, 10.58, 12.01,
        13.49, 15.03, 16.63, 18.29, 20.02, 21.82, 23.7, 25.65, 27.67, 29.78,
        31.97, 34.25, 36.62, 39.08, 41.65, 44.31, 47.08, 49.97, 52.97, 56.08,
        59.33, 62.7, 66.21, 69.86,
      ],
      60: [
        0.0, 0.0, 1.0, 2.04, 3.12, 4.25, 5.42, 6.63, 7.9, 9.21, 10.58, 12.01,
        13.49, 15.03, 16.63, 18.29, 20.02, 21.82, 23.7, 25.65, 27.67, 29.78,
        31.97, 34.25, 36.62, 39.08, 41.65, 44.31, 47.08, 49.97, 52.97,
      ],
    },
    cash_value: {
      8: [
        0.92, 1.9, 1.94, 2.0, 2.09, 2.29, 2.51, 2.77, 3.05, 3.37, 3.76, 4.2,
        4.7, 5.28, 5.92, 6.65, 7.46, 8.37, 9.39, 10.53, 11.78, 13.17, 14.7,
        16.38, 18.22, 20.22, 22.41, 24.78, 27.34, 30.11, 33.11, 36.35, 39.85,
        43.64, 47.73, 52.15, 56.93, 62.09, 67.67, 73.69, 80.18, 87.18, 94.72,
        102.84, 111.58, 120.98, 131.1, 141.99, 153.71, 166.31, 179.85, 194.4,
        210.04, 226.8, 244.76, 264.0, 284.61, 306.68, 330.29, 355.53, 382.51,
        411.33, 442.11, 475.03, 510.15, 547.59, 587.48, 629.96, 675.19, 723.32,
        774.53, 828.96, 886.78,
      ],
      18: [
        0.92, 1.9, 1.94, 2.01, 2.11, 2.29, 2.52, 2.79, 3.11, 3.48, 3.92, 4.43,
        5.0, 5.64, 6.36, 7.17, 8.06, 9.04, 10.13, 11.32, 12.64, 14.08, 15.67,
        17.4, 19.29, 21.35, 23.61, 26.06, 28.73, 31.63, 34.78, 38.21, 41.92,
        45.93, 50.28, 54.99, 60.08, 65.58, 71.53, 77.95, 84.87, 92.34, 100.38,
        109.03, 118.33, 128.33, 139.07, 150.61, 163.0, 176.29, 190.54, 205.83,
        222.21, 239.74, 258.51, 278.58, 300.03, 322.95, 347.44, 373.59, 401.51,
        431.28, 463.02, 496.83, 532.83, 571.13, 611.84, 655.08, 700.96, 749.61,
        801.17, 855.78, 913.64,
      ],
      25: [
        0.93, 1.93, 1.99, 2.08, 2.2, 2.4, 2.65, 2.94, 3.27, 3.66, 4.11, 4.61,
        5.18, 5.82, 6.54, 7.33, 8.22, 9.2, 10.28, 11.48, 12.8, 14.25, 15.84,
        17.58, 19.49, 21.57, 23.84, 26.31, 29.0, 31.91, 35.08, 38.51, 42.23,
        46.26, 50.62, 55.33, 60.42, 65.91, 71.82, 78.19, 85.05, 92.43, 100.37,
        108.9, 118.06, 127.89, 138.44, 149.73, 161.83, 174.77, 188.62, 203.42,
        219.23, 236.12, 254.13, 273.34, 293.81, 315.59, 338.75, 363.36, 389.47,
        417.14, 446.43, 477.42, 510.19, 544.84,
      ],
      30: [
        0.94, 1.95, 2.02, 2.11, 2.23, 2.44, 2.68, 2.96, 3.28, 3.66, 4.1, 4.6,
        5.16, 5.79, 6.5, 7.3, 8.18, 9.15, 10.23, 11.43, 12.74, 14.18, 15.76,
        17.49, 19.37, 21.43, 23.67, 26.12, 28.77, 31.66, 34.79, 38.18, 41.85,
        45.82, 50.1, 54.72, 59.71, 65.09, 70.87, 77.1, 83.8, 91.0, 98.71,
        106.99, 115.85, 125.33, 135.48, 146.33, 157.93, 170.31, 183.51, 197.57,
        212.54, 228.45, 245.34, 263.25, 282.22, 302.27, 323.44, 345.81, 369.42,
      ],
      35: [
        0.94, 1.94, 1.99, 2.08, 2.19, 2.38, 2.61, 2.88, 3.19, 3.56, 3.99, 4.48,
        5.03, 5.65, 6.35, 7.13, 7.99, 8.95, 10.0, 11.16, 12.44, 13.84, 15.38,
        17.07, 18.91, 20.91, 23.1, 25.47, 28.04, 30.84, 33.86, 37.13, 40.66,
        44.48, 48.59, 53.03, 57.8, 62.92, 68.43, 74.32, 80.64, 87.4, 94.64,
        102.37, 110.62, 119.42, 128.79, 138.75, 149.32, 160.53, 172.38, 184.9,
        198.09, 211.98, 226.59, 241.96,
      ],
      40: [
        0.94, 1.94, 2.0, 2.08, 2.2, 2.39, 2.62, 2.89, 3.21, 3.57, 4.0, 4.49,
        5.04, 5.65, 6.33, 7.1, 7.94, 8.88, 9.92, 11.06, 12.32, 13.7, 15.2,
        16.85, 18.63, 20.58, 22.69, 24.99, 27.48, 30.17, 33.08, 36.21, 39.59,
        43.22, 47.12, 51.3, 55.78, 60.57, 65.7, 71.18, 77.02, 83.23, 89.83,
        96.83, 104.24, 112.06, 120.29, 128.94, 138.01, 147.51, 157.47,
      ],
      45: [
        0.94, 1.94, 2.0, 2.09, 2.21, 2.4, 2.62, 2.89, 3.2, 3.55, 3.97, 4.44,
        4.98, 5.57, 6.24, 6.99, 7.82, 8.73, 9.73, 10.83, 12.04, 13.36, 14.8,
        16.37, 18.07, 19.92, 21.93, 24.09, 26.43, 28.94, 31.64, 34.53, 37.64,
        40.96, 44.51, 48.3, 52.33, 56.6, 61.13, 65.91, 70.94, 76.22, 81.75,
        87.51, 93.52, 99.78,
      ],
      50: [
        0.92, 1.9, 1.93, 1.99, 2.08, 2.24, 2.44, 2.68, 2.96, 3.28, 3.67, 4.1,
        4.59, 5.14, 5.74, 6.42, 7.17, 7.99, 8.89, 9.89, 10.97, 12.15, 13.43,
        14.81, 16.3, 17.9, 19.62, 21.47, 23.45, 25.56, 27.81, 30.19, 32.71,
        35.37, 38.15, 41.05, 44.07, 47.18, 50.38, 53.66, 57.02,
      ],
      55: [
        0.88, 1.82, 1.81, 1.83, 1.87, 2.01, 2.19, 2.39, 2.63, 2.92, 3.26, 3.65,
        4.09, 4.58, 5.13, 5.73, 6.4, 7.14, 7.94, 8.81, 9.75, 10.77, 11.88,
        13.07, 14.34, 15.7, 17.15, 18.69, 20.3, 22.0, 23.77, 25.6, 27.49, 29.42,
        31.39, 33.39,
      ],
      60: [
        0.86, 1.78, 1.75, 1.73, 1.74, 1.85, 1.99, 2.16, 2.36, 2.6, 2.89, 3.22,
        3.6, 4.01, 4.46, 4.96, 5.5, 6.09, 6.74, 7.43, 8.17, 8.96, 9.8, 10.67,
        11.59, 12.54, 13.5, 14.48, 15.46, 16.44, 17.41,
      ],
    },
    income: {
      8: [
        0.0, 0.15, 0.16, 0.19, 0.22, 0.27, 0.31, 0.36, 0.41, 0.47, 0.53, 0.59,
        0.67, 0.74, 0.83, 0.92, 1.02, 1.13, 1.25, 1.38, 1.52, 1.67, 1.83, 2.0,
        2.19, 2.39, 2.61, 2.84, 3.09, 3.36, 3.64, 3.95, 4.27, 4.62, 5.0, 5.4,
        5.83, 6.29, 6.78, 7.31, 7.87, 8.48, 9.13, 9.82, 10.56, 11.35, 12.2,
        13.11, 14.08, 15.12, 16.24, 17.42, 18.7, 20.06, 21.5, 23.05, 24.7,
        26.46, 28.34, 30.34, 32.47, 34.74, 37.16, 39.74, 42.48, 45.4, 48.5,
        51.79, 55.29, 59.01, 62.95, 67.13, 71.57,
      ],
      18: [
        0.0, 0.15, 0.16, 0.19, 0.23, 0.27, 0.31, 0.36, 0.41, 0.47, 0.54, 0.61,
        0.69, 0.77, 0.86, 0.96, 1.06, 1.18, 1.3, 1.43, 1.58, 1.73, 1.9, 2.07,
        2.27, 2.47, 2.69, 2.93, 3.19, 3.46, 3.76, 4.08, 4.42, 4.78, 5.18, 5.6,
        6.05, 6.53, 7.05, 7.61, 8.2, 8.84, 9.52, 10.25, 11.03, 11.87, 12.76,
        13.71, 14.73, 15.82, 16.98, 18.22, 19.55, 20.96, 22.47, 24.07, 25.78,
        27.6, 29.54, 31.61, 33.8, 36.14, 38.62, 41.26, 44.07, 47.05, 50.2,
        53.55, 57.09, 60.85, 64.81, 69.01, 73.45,
      ],
      25: [
        0.0, 0.15, 0.16, 0.2, 0.23, 0.27, 0.32, 0.37, 0.43, 0.49, 0.55, 0.62,
        0.7, 0.78, 0.87, 0.97, 1.08, 1.19, 1.31, 1.44, 1.59, 1.74, 1.91, 2.09,
        2.28, 2.49, 2.71, 2.95, 3.21, 3.48, 3.51, 4.1, 4.44, 4.81, 5.2, 5.62,
        6.07, 6.55, 7.07, 7.62, 8.21, 8.85, 9.52, 10.24, 11.01, 11.84, 12.72,
        13.65, 14.65, 15.72, 16.85, 18.06, 19.34, 20.71, 22.16, 23.71, 25.35,
        27.09, 28.93, 30.89, 32.96, 35.15, 37.46, 39.91, 42.48, 45.21,
      ],
      30: [
        0.0, 0.16, 0.17, 0.2, 0.23, 0.28, 0.32, 0.37, 0.43, 0.49, 0.55, 0.62,
        0.7, 0.78, 0.87, 0.97, 1.07, 1.19, 1.31, 1.44, 1.58, 1.74, 1.9, 2.08,
        2.27, 2.48, 2.7, 2.94, 3.19, 3.47, 3.76, 4.07, 4.41, 4.77, 5.16, 5.58,
        6.02, 6.5, 7.0, 7.55, 8.13, 8.75, 9.41, 10.11, 10.86, 11.66, 12.51,
        13.42, 14.38, 15.4, 16.49, 17.65, 18.87, 20.17, 21.55, 23.0, 24.53,
        26.15, 27.86, 29.66, 31.56,
      ],
      35: [
        0.0, 0.15, 0.16, 0.2, 0.23, 0.27, 0.32, 0.37, 0.42, 0.48, 0.54, 0.61,
        0.69, 0.77, 0.86, 0.96, 1.06, 1.17, 1.29, 1.42, 1.42, 1.56, 1.72, 1.88,
        2.06, 2.25, 2.45, 2.67, 2.9, 3.16, 3.43, 3.72, 4.03, 4.37, 4.73, 5.11,
        5.52, 5.96, 6.42, 6.92, 7.45, 8.02, 8.62, 9.26, 9.94, 10.67, 11.44,
        12.25, 13.11, 14.02, 14.98, 16.0, 17.06, 18.18, 19.36, 20.59,
      ],
      40: [
        0.0, 0.16, 0.16, 0.2, 0.23, 0.27, 0.32, 0.37, 0.42, 0.48, 0.54, 0.61,
        0.69, 0.77, 0.86, 0.95, 1.06, 1.17, 1.29, 1.42, 1.42, 1.55, 1.7, 1.86,
        2.04, 2.22, 2.42, 2.64, 2.87, 3.11, 3.37, 3.66, 3.96, 4.28, 4.62, 4.99,
        5.38, 5.79, 6.23, 6.7, 7.2, 7.73, 8.28, 8.87, 9.5, 10.15, 10.84, 11.56,
        12.32, 13.11, 13.94,
      ],
      45: [
        0.0, 0.16, 0.16, 0.2, 0.23, 0.27, 0.32, 0.37, 0.42, 0.48, 0.49, 0.55,
        0.62, 0.69, 0.77, 0.86, 0.95, 1.05, 1.16, 1.27, 1.4, 1.53, 1.68, 1.83,
        2.0, 2.18, 2.37, 2.57, 2.79, 3.03, 3.27, 3.54, 3.82, 4.12, 4.44, 4.78,
        5.14, 5.51, 5.91, 6.33, 6.77, 7.24, 7.72, 8.22, 8.75, 9.29,
      ],
      50: [
        0.0, 0.15, 0.16, 0.19, 0.22, 0.24, 0.28, 0.32, 0.37, 0.41, 0.43, 0.48,
        0.54, 0.6, 0.67, 0.74, 0.82, 0.91, 1.0, 1.1, 1.21, 1.33, 1.45, 1.58,
        1.73, 1.88, 2.04, 2.21, 2.39, 2.59, 2.79, 3.01, 3.24, 3.48, 3.73, 3.99,
        4.26, 4.54, 4.83, 5.13, 5.44,
      ],
      55: [
        0.0, 0.15, 0.15, 0.17, 0.19, 0.21, 0.24, 0.27, 0.31, 0.35, 0.4, 0.45,
        0.5, 0.56, 0.62, 0.69, 0.77, 0.85, 0.93, 1.03, 1.13, 1.23, 1.34, 1.46,
        1.59, 1.72, 1.87, 2.02, 2.17, 2.34, 2.51, 2.69, 2.87, 3.06, 3.26, 3.46,
      ],
      60: [
        0.0, 0.12, 0.14, 0.15, 0.17, 0.2, 0.23, 0.26, 0.29, 0.33, 0.37, 0.42,
        0.47, 0.52, 0.58, 0.64, 0.71, 0.78, 0.85, 0.93, 1.01, 1.1, 1.2, 1.3,
        1.4, 1.5, 1.61, 1.72, 1.84, 1.95, 2.07,
      ],
    },
  };

  var ratios = {
    leverage: {
      8: [
        0.0, 0.0, 0.0, 1.0, 2.04, 4.12, 6.29, 9.54, 12.92, 16.44, 20.09, 23.9,
        27.85, 31.97, 36.25, 40.7, 45.32, 50.14, 55.14, 60.35, 65.76, 71.39,
        77.25, 83.34, 89.67, 96.26, 103.11, 110.23, 117.64, 125.35, 133.36,
        141.7, 150.36, 159.38, 168.75, 178.5, 188.64, 199.19, 210.16, 221.56,
        233.43, 245.76, 258.59, 271.94, 285.82, 300.25, 315.26, 330.87, 347.1,
        363.99, 381.55, 399.81, 418.8, 438.55, 459.1, 480.46, 502.68, 525.78,
        549.82, 574.81, 600.8, 627.83, 655.95, 685.18, 715.59, 747.21, 780.1,
        814.31, 849.88, 886.87, 925.35, 965.36, 1006.98,
      ],
      18: [
        0.0, 0.0, 1.0, 2.04, 4.12, 6.29, 9.54, 12.92, 17.44, 22.13, 27.02, 32.1,
        37.38, 42.88, 48.59, 54.54, 60.72, 67.15, 73.83, 80.79, 88.02, 95.54,
        103.36, 111.5, 119.96, 128.75, 137.9, 147.42, 157.32, 167.61, 178.31,
        189.45, 201.02, 213.07, 225.59, 238.61, 252.16, 266.24, 280.89, 296.13,
        311.97, 328.45, 345.59, 363.41, 381.95, 401.23, 421.28, 442.13, 463.81,
        486.37, 509.82, 534.21, 559.58, 585.97, 613.4, 641.94, 671.62, 702.48,
        734.58, 767.97, 802.68, 838.79, 876.34, 915.4, 956.01, 998.25, 1042.18,
        1087.87, 1135.39, 1184.8, 1236.19, 1289.64, 1345.23,
      ],
      25: [
        0.0, 0.0, 1.0, 2.04, 4.12, 6.29, 9.54, 12.92, 17.44, 22.13, 27.02, 32.1,
        37.38, 42.88, 48.59, 54.54, 60.72, 67.15, 73.83, 80.79, 88.02, 95.54,
        103.36, 111.5, 119.96, 128.75, 137.9, 147.42, 157.32, 167.61, 178.31,
        189.45, 201.02, 213.07, 225.59, 238.61, 252.16, 266.24, 280.89, 296.13,
        311.97, 328.45, 345.59, 363.41, 381.95, 401.23, 421.28, 442.13, 463.81,
        486.37, 509.82, 534.21, 559.58, 585.97, 613.4, 641.94, 671.62, 702.48,
        734.58, 767.97, 802.68, 838.79, 876.34, 915.4, 956.01, 998.25,
      ],
      30: [
        0.0, 0.0, 1.0, 2.04, 4.12, 6.29, 9.54, 12.92, 17.44, 22.13, 27.02, 32.1,
        37.38, 42.88, 48.59, 54.54, 60.72, 67.15, 73.83, 80.79, 88.02, 95.54,
        103.36, 111.5, 119.96, 128.75, 137.9, 147.42, 157.32, 167.61, 178.31,
        189.45, 201.02, 213.07, 225.59, 238.61, 252.16, 266.24, 280.89, 296.13,
        311.97, 328.45, 345.59, 363.41, 381.95, 401.23, 421.28, 442.13, 463.81,
        486.37, 509.82, 534.21, 559.58, 585.97, 613.4, 641.94, 671.62, 702.48,
        734.58, 767.97, 802.68,
      ],
      35: [
        0.0, 0.0, 1.0, 2.04, 4.12, 6.29, 9.54, 12.92, 17.44, 22.13, 27.02, 32.1,
        37.38, 42.88, 48.59, 54.54, 60.72, 67.15, 73.83, 80.79, 88.02, 95.54,
        103.36, 111.5, 119.96, 128.75, 137.9, 147.42, 157.32, 167.61, 178.31,
        189.45, 201.02, 213.07, 225.59, 238.61, 252.16, 266.24, 280.89, 296.13,
        311.97, 328.45, 345.59, 363.41, 381.95, 401.23, 421.28, 442.13, 463.81,
        486.37, 509.82, 534.21, 559.58, 585.97, 613.4, 641.94,
      ],
      40: [
        0.0, 0.0, 1.0, 2.04, 4.12, 6.29, 9.54, 12.92, 17.44, 22.13, 27.02, 32.1,
        37.38, 42.88, 48.59, 54.54, 60.72, 67.15, 73.83, 80.79, 88.02, 95.54,
        103.36, 111.5, 119.96, 128.75, 137.9, 147.42, 157.32, 167.61, 178.31,
        189.45, 201.02, 213.07, 225.59, 238.61, 252.16, 266.24, 280.89, 296.13,
        311.97, 328.45, 345.59, 363.41, 381.95, 401.23, 421.28, 442.13, 463.81,
        486.37, 509.82,
      ],
      45: [
        0.0, 0.0, 1.0, 2.04, 4.12, 6.29, 9.54, 12.92, 17.44, 22.13, 27.02, 32.1,
        37.38, 42.88, 48.59, 54.54, 60.72, 67.15, 73.83, 80.79, 88.02, 95.54,
        103.36, 111.5, 119.96, 128.75, 137.9, 147.42, 157.32, 167.61, 178.31,
        189.45, 201.02, 213.07, 225.59, 238.61, 252.16, 266.24, 280.89, 296.13,
        311.97, 328.45, 345.59, 363.41, 381.95, 401.23,
      ],
      50: [
        0.0, 0.0, 1.0, 2.04, 4.12, 6.29, 9.54, 12.92, 17.44, 22.13, 27.02, 32.1,
        37.38, 42.88, 48.59, 54.54, 60.72, 67.15, 73.83, 80.79, 88.02, 95.54,
        103.36, 111.5, 119.96, 128.75, 137.9, 147.42, 157.32, 167.61, 178.31,
        189.45, 201.02, 213.07, 225.59, 238.61, 252.16, 266.24, 280.89, 296.13,
        311.97,
      ],
      55: [
        0.0, 0.0, 1.0, 2.04, 4.12, 6.29, 8.54, 10.88, 13.31, 15.85, 18.48,
        21.22, 24.07, 27.03, 30.11, 33.32, 36.65, 40.12, 43.72, 47.47, 51.37,
        55.42, 59.64, 64.03, 68.59, 73.33, 78.26, 83.39, 88.73, 94.28, 100.05,
        106.05, 112.29, 118.79, 125.54, 132.56,
      ],
      60: [
        0.0, 0.0, 1.0, 2.04, 4.12, 6.29, 8.54, 10.88, 13.31, 15.85, 18.48,
        21.22, 24.07, 27.03, 30.11, 33.32, 36.65, 40.12, 43.72, 47.47, 51.37,
        55.42, 59.64, 64.03, 68.59, 73.33, 78.26, 83.39, 88.73, 94.28, 100.05,
      ],
    },
    cash_value: {
      8: [
        0.92, 1.89, 2.93, 3.94, 5.04, 6.36, 7.8, 9.29, 10.89, 12.6, 14.58,
        16.77, 19.18, 21.83, 24.77, 28.0, 31.54, 35.43, 39.73, 44.44, 49.59,
        55.22, 61.35, 68.0, 75.2, 82.99, 91.4, 100.46, 110.21, 120.71, 132.03,
        144.23, 157.38, 171.55, 186.8, 203.22, 220.9, 239.92, 260.39, 282.41,
        306.07, 331.5, 358.79, 388.07, 419.45, 453.07, 489.09, 527.67, 569.01,
        613.29, 660.71, 711.46, 765.73, 823.74, 885.68, 951.82, 1022.4, 1097.71,
        1178.05, 1263.74, 1355.1, 1452.44, 1556.08, 1666.35, 1783.59, 1908.13,
        2040.35, 2180.68, 2329.55, 2487.41, 2654.69, 2831.8, 3019.12,
      ],
      18: [
        0.92, 1.9, 2.86, 3.9, 4.93, 6.27, 7.72, 9.34, 11.13, 13.16, 15.53,
        18.17, 21.1, 24.35, 27.92, 31.85, 36.14, 40.84, 45.96, 51.54, 57.61,
        64.24, 71.45, 79.3, 87.82, 97.07, 107.11, 117.99, 129.79, 142.57,
        156.39, 171.34, 187.48, 204.89, 223.65, 243.86, 265.63, 289.06, 314.28,
        341.41, 370.59, 401.95, 435.63, 471.77, 510.52, 552.04, 596.53, 644.18,
        695.19, 749.78, 808.19, 870.63, 937.35, 1008.59, 1084.58, 1165.6,
        1251.94, 1343.89, 1441.79, 1545.98, 1656.8, 1774.57, 1899.63, 2032.32,
        2172.97, 2321.9, 2479.41, 2645.77, 2821.24, 3006.08, 3200.62, 3405.27,
        3620.57,
      ],
      25: [
        0.92, 1.91, 2.91, 4.0, 5.1, 6.5, 8.03, 9.73, 11.58, 13.65, 16.02, 18.63,
        21.51, 24.68, 28.18, 32.03, 36.24, 40.86, 45.92, 51.45, 57.49, 64.07,
        71.25, 79.06, 87.55, 96.76, 106.75, 117.55, 129.23, 141.85, 155.49,
        170.22, 186.12, 203.27, 221.75, 241.66, 263.06, 286.05, 310.74, 337.24,
        365.66, 396.14, 428.8, 463.79, 501.25, 541.3, 584.09, 629.77, 678.48,
        730.38, 785.66, 844.52, 907.13, 973.7, 1044.41, 1119.42, 1198.91,
        1283.05, 1371.98, 1465.82, 1564.68, 1668.63, 1777.74, 1892.13, 2011.97,
        2137.65,
      ],
      30: [
        0.94, 1.94, 2.95, 4.04, 5.16, 6.56, 8.06, 9.73, 11.53, 13.54, 15.86,
        18.44, 21.29, 24.43, 27.9, 31.72, 35.92, 40.53, 45.58, 51.09, 57.11,
        63.66, 70.78, 78.51, 86.9, 96.0, 105.85, 116.53, 128.09, 140.58, 154.06,
        168.6, 184.25, 201.09, 219.2, 238.67, 259.57, 282.02, 306.1, 331.91,
        359.55, 389.11, 420.69, 454.39, 490.33, 528.63, 569.43, 612.85, 659.03,
        708.09, 760.13, 815.27, 873.61, 935.24, 1000.23, 1068.61, 1140.42,
        1215.68, 1294.43, 1376.78, 1462.88,
      ],
      35: [
        0.93, 1.93, 2.91, 3.98, 5.06, 6.42, 7.87, 9.5, 11.25, 13.22, 15.49,
        18.02, 20.82, 23.91, 27.33, 31.09, 35.2, 39.71, 44.62, 49.98, 55.82,
        62.18, 69.1, 76.62, 84.78, 93.62, 103.17, 113.49, 124.61, 136.59,
        149.49, 163.37, 178.3, 194.33, 211.54, 229.98, 249.7, 270.78, 293.27,
        317.23, 342.76, 369.92, 398.81, 429.48, 462.01, 496.45, 532.85, 571.24,
        611.66, 654.08, 698.5, 744.87, 793.12, 843.24, 895.22, 949.11,
      ],
      40: [
        0.93, 1.92, 2.9, 3.96, 5.05, 6.4, 7.86, 9.48, 11.23, 13.19, 15.45,
        17.94, 20.7, 23.73, 27.06, 30.72, 34.73, 39.12, 43.92, 49.16, 54.86,
        61.04, 67.74, 74.98, 82.81, 91.26, 100.38, 110.2, 120.78, 132.14,
        144.33, 157.38, 171.33, 186.22, 202.08, 218.96, 236.91, 255.98, 276.21,
        297.62, 320.23, 344.06, 369.12, 395.38, 422.81, 451.36, 480.94, 511.46,
        542.86, 575.08, 608.13,
      ],
      45: [
        0.93, 1.92, 2.88, 3.92, 5.01, 6.35, 7.78, 9.37, 11.07, 12.96, 15.13,
        17.54, 20.21, 23.15, 26.38, 29.92, 33.79, 38.0, 42.58, 47.54, 52.92,
        58.75, 65.05, 71.84, 79.17, 87.04, 95.48, 104.5, 114.13, 124.39, 135.31,
        146.91, 159.22, 172.25, 186.02, 200.52, 215.74, 231.68, 248.29, 265.52,
        283.3, 301.54, 320.14, 339.0, 358.06, 377.29,
      ],
      50: [
        0.91, 1.89, 2.78, 3.75, 4.71, 5.96, 7.32, 8.84, 10.44, 12.23, 14.3,
        16.58, 19.08, 21.83, 24.82, 28.09, 31.65, 35.52, 39.71, 44.25, 49.14,
        54.39, 60.02, 66.03, 72.43, 79.24, 86.47, 94.14, 102.24, 110.78, 119.73,
        129.09, 138.83, 148.9, 159.24, 169.79, 180.44, 191.11, 201.68, 212.09,
        222.29,
      ],
      55: [
        0.87, 1.79, 2.65, 3.58, 4.47, 5.71, 7.05, 8.52, 10.12, 11.86, 13.81,
        15.92, 18.2, 20.67, 23.33, 26.18, 29.25, 32.53, 36.03, 39.77, 43.74,
        47.97, 52.46, 57.22, 62.26, 67.56, 73.14, 78.99, 85.1, 91.44, 98.0,
        104.75, 111.64, 118.66, 125.78, 132.99,
      ],
      60: [
        0.84, 1.73, 2.55, 3.44, 4.46, 5.77, 7.2, 8.76, 10.45, 12.3, 14.35,
        16.56, 18.95, 21.52, 24.29, 27.26, 30.45, 33.86, 37.52, 41.42, 45.57,
        49.99, 54.68, 59.65, 64.88, 70.39, 76.17, 82.22, 88.52, 95.08, 101.92,
      ],
    },
    income: {
      8: [
        0.0, 0.13, 0.21, 0.3, 0.4, 0.55, 0.7, 0.89, 1.09, 1.29, 1.52, 1.77,
        2.04, 2.33, 2.64, 2.98, 3.34, 3.73, 4.16, 4.62, 5.12, 5.65, 6.23, 6.84,
        7.51, 8.22, 8.98, 9.79, 10.66, 11.58, 12.58, 13.64, 14.78, 15.99, 17.3,
        18.69, 20.18, 21.77, 23.48, 25.31, 27.26, 29.35, 31.58, 33.96, 36.51,
        39.22, 42.12, 45.21, 48.51, 52.03, 55.79, 59.8, 64.07, 68.63, 73.48,
        78.64, 84.13, 89.98, 96.21, 102.83, 109.88, 117.37, 125.32, 133.77,
        142.74, 152.25, 162.33, 173.01, 184.32, 196.29, 208.96, 222.36, 236.51,
      ],
      18: [
        0.0, 0.13, 0.22, 0.32, 0.45, 0.6, 0.78, 0.98, 1.22, 1.47, 1.76, 2.07,
        2.41, 2.78, 3.17, 3.59, 4.05, 4.54, 5.06, 5.63, 6.23, 6.89, 7.59, 8.34,
        9.15, 10.01, 10.95, 11.95, 13.02, 14.17, 15.41, 16.73, 18.15, 19.67,
        21.3, 23.04, 24.9, 26.89, 29.02, 31.3, 33.74, 36.35, 39.13, 42.11,
        45.29, 48.67, 52.29, 56.15, 60.26, 64.64, 69.32, 74.3, 79.6, 85.25,
        91.26, 97.64, 104.43, 111.63, 119.29, 127.42, 136.04, 145.19, 154.88,
        165.15, 176.01, 187.49, 199.61, 212.4, 225.87, 240.05, 254.95, 270.61,
        287.07,
      ],
      25: [
        0.0, 0.13, 0.23, 0.33, 0.46, 0.61, 0.8, 1.0, 1.25, 1.51, 1.8, 2.11,
        2.44, 2.8, 3.19, 3.61, 4.06, 4.54, 5.06, 5.62, 6.22, 6.87, 7.57, 8.32,
        9.13, 9.99, 10.92, 11.91, 12.98, 14.12, 15.34, 16.65, 18.05, 19.56,
        21.16, 22.88, 24.72, 26.68, 28.77, 31.01, 33.4, 35.94, 38.66, 41.55,
        44.64, 47.92, 51.42, 55.14, 59.09, 63.29, 67.74, 72.47, 77.49, 82.81,
        88.44, 94.41, 100.71, 107.38, 114.4, 121.81, 129.59, 137.77, 146.35,
        155.33, 164.74, 174.59,
      ],
      30: [
        0.0, 0.14, 0.23, 0.33, 0.46, 0.62, 0.8, 1.0, 1.24, 1.5, 1.79, 2.09,
        2.42, 2.78, 3.17, 3.58, 4.03, 4.52, 5.04, 5.6, 6.2, 6.84, 7.54, 8.28,
        9.08, 9.94, 10.86, 11.84, 12.9, 14.03, 15.24, 16.54, 17.92, 19.4, 20.98,
        22.67, 24.47, 26.4, 28.45, 30.64, 32.97, 35.45, 38.09, 40.89, 43.87,
        47.04, 50.39, 53.95, 57.73, 61.73, 65.95, 70.42, 75.14, 80.12, 85.35,
        90.85, 96.62, 102.66, 108.97, 115.57, 122.47,
      ],
      35: [
        0.0, 0.13, 0.23, 0.33, 0.46, 0.61, 0.79, 0.99, 1.22, 1.48, 1.76, 2.06,
        2.39, 2.75, 3.13, 3.54, 3.98, 4.46, 4.97, 5.52, 6.11, 6.74, 7.42, 8.15,
        8.93, 9.77, 10.67, 11.63, 12.66, 13.75, 14.92, 16.17, 17.51, 18.93,
        20.45, 22.06, 23.78, 25.61, 27.55, 29.61, 31.79, 34.11, 36.56, 39.15,
        41.89, 44.78, 47.83, 51.04, 54.41, 57.95, 61.64, 65.5, 69.51, 73.68,
        78.0, 82.49,
      ],
      40: [
        0.0, 0.13, 0.23, 0.33, 0.46, 0.61, 0.79, 0.99, 1.22, 1.48, 1.76, 2.06,
        2.38, 2.73, 3.11, 3.51, 3.95, 4.42, 4.92, 5.46, 6.04, 6.66, 7.33, 8.04,
        8.8, 9.61, 10.47, 11.4, 12.39, 13.44, 14.56, 15.75, 17.02, 18.36, 19.79,
        21.29, 22.89, 24.57, 26.36, 28.24, 30.22, 32.3, 34.48, 36.76, 39.15,
        41.63, 44.2, 46.86, 49.6, 52.41, 55.31,
      ],
      45: [
        0.0, 0.13, 0.23, 0.33, 0.45, 0.6, 0.78, 0.98, 1.21, 1.46, 1.73, 2.03,
        2.35, 2.69, 3.06, 3.46, 3.88, 4.34, 4.83, 5.35, 5.91, 6.5, 7.14, 7.82,
        8.54, 9.31, 10.13, 11.0, 11.92, 12.9, 13.93, 15.02, 16.17, 17.38, 18.66,
        20.0, 21.41, 22.87, 24.4, 25.99, 27.63, 29.32, 31.05, 32.82, 34.61,
        36.44,
      ],
      50: [
        0.0, 0.13, 0.22, 0.31, 0.43, 0.57, 0.75, 0.94, 1.17, 1.41, 1.68, 1.96,
        2.27, 2.6, 2.95, 3.33, 3.73, 4.16, 4.63, 5.12, 5.64, 6.2, 6.79, 7.41,
        8.07, 8.77, 9.5, 10.28, 11.09, 11.94, 12.84, 13.77, 14.74, 15.75, 16.79,
        17.85, 18.93, 20.03, 21.14, 22.25, 23.36,
      ],
      55: [
        0.0, 0.13, 0.21, 0.29, 0.4, 0.53, 0.66, 0.81, 0.98, 1.15, 1.34, 1.54,
        1.76, 1.99, 2.24, 2.5, 2.78, 3.08, 3.4, 3.73, 4.09, 4.47, 4.87, 5.29,
        5.73, 6.2, 6.69, 7.2, 7.73, 8.29, 8.86, 9.45, 10.06, 10.68, 11.32,
        11.96,
      ],
      60: [
        0.0, 0.12, 0.2, 0.28, 0.39, 0.53, 0.67, 0.83, 1.0, 1.18, 1.37, 1.58,
        1.81, 2.05, 2.3, 2.57, 2.86, 3.17, 3.5, 3.85, 4.22, 4.61, 5.02, 5.46,
        5.91, 6.39, 6.9, 7.42, 7.97, 8.54, 9.14,
      ],
    },
  };

  var male_preferred_plus = [
    124, 120, 116, 111, 107, 103, 99, 96, 92, 89, 85, 82, 79, 77, 74, 71, 69,
    67, 64, 62, 60, 58, 56, 55, 53, 51, 49, 48, 46, 45, 43, 42, 40, 39, 37, 36,
    35, 34, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 23, 22, 21, 20, 20, 19, 19,
    18, 17, 17, 16, 16, 15, 15, 14, 14, 13, 13,
  ];

  // var female_preferred_plus = [
  //     147,142,137,133,128,123,119,114,110,105,
  //     101,98,94,91,87,84,81,78,76,73,
  //     70,68,65,63,60,58,56,54,53,51,
  //     49,47,46,44,43,41,40,38,37,35,
  //     34,33,32,31,30,29,28,27,26,25,
  //     24,23,22,22,21,20,19,19,18,18,
  //     17,16,16,15,15,14
  // ]

  function hardenNumber(num) {
    // If the number is negative, return 0 else return the floor of the number to remove decimals
    return num !== null && num !== "" ? (num < 0 ? 0 : Math.floor(num)) : 0;
  }

  // function removeCurrency(num) {
  //     return num.replace("$", "").replace(",", "");
  // }

  function checkNaN(num) {
    return Number.isNaN(num) ? 0 : num;
  }

  function setAgeForRatios(age) {
    if (age >= 18 && age < 23) {
      return 18;
    }
    if (age < 18) {
      return 8;
    }
    if (age > 65) {
      return 65;
    }
    if (age >= 23) {
      return Math.round(age / 5) * 5;
    }
  }

  //   function ira_calc(
  //     contrib,
  //     growth_rate,
  //     expense_rate,
  //     end_bal,
  //     exp,
  //     contr,
  //     year
  //   ) {
  //     var ageText = "#current_age";
  //     var retirementText = "#desired_age";
  //     var current_age = hardenNumber(jQuery(ageText).val());
  //     var retirement_age = hardenNumber(jQuery(retirementText).val());
  //     var beg_balance = contrib + end_bal;
  //     var growth = beg_balance * growth_rate;
  //     var subtotal = beg_balance + growth;
  //     var expense = subtotal * expense_rate;
  //     end_bal = subtotal - expense;
  //     var running_expense = expense + exp;
  //     var running_contrib = contrib + contr;
  //     if (current_age > retirement_age) {
  //       return (retirement_age = current_age);
  //     }
  //     if (year === 0) {
  //       return end_bal;
  //     } else {
  //       console.log(end_bal);
  //       return ira_calc(
  //         contrib,
  //         growth_rate,
  //         expense_rate,
  //         end_bal,
  //         running_expense,
  //         running_contrib,
  //         year - 1
  //       );
  //     }
  //   }

  //   function ira_calc_lump(
  //     contrib,
  //     growth_rate,
  //     expense_rate,
  //     end_bal,
  //     exp,
  //     contr,
  //     year,
  //     iter
  //   ) {
  //     var ageText = "#current_age";
  //     var retirementText = "#desired_age";
  //     var current_age = hardenNumber(jQuery(ageText).val());
  //     var retirement_age = hardenNumber(jQuery(retirementText).val());
  //     iter = iter + 1;
  //     var beg_balance = contrib + end_bal;
  //     var growth = beg_balance * growth_rate;
  //     var subtotal = beg_balance + growth;
  //     var expense = subtotal * expense_rate;
  //     end_bal = subtotal - expense;
  //     var running_expense = expense + exp;
  //     var running_contrib = contrib + contr;
  //     if (current_age > retirement_age) {
  //       return (retirement_age = current_age);
  //     }
  //     if (iter < 2) {
  //       return ira_calc_lump(
  //         contrib,
  //         growth_rate,
  //         expense_rate,
  //         end_bal,
  //         running_expense,
  //         running_contrib,
  //         year - 1,
  //         iter
  //       );
  //     } else {
  //       // End condition
  //       if (year === 0) {
  //         return end_bal;
  //       } else {
  //         // Years 3+ need contrib = 0
  //         return ira_calc_lump(
  //           0,
  //           growth_rate,
  //           expense_rate,
  //           end_bal,
  //           running_expense,
  //           running_contrib,
  //           year - 1,
  //           iter
  //         );
  //       }
  //     }
  //   }

  function calculate() {
    var ageText = "#current_age";
    var retirementText = "#desired_age";
    var lumpSumText = "#LumpSum";
    var monthlyContribText = "#OngoingContributions";
    var desired_retierment_income = "#desired_retirement";
    // var ira_assumed_growth_rate = 0.6;
    // var ira_annual_expense_rate = 0.01;
    // var ira_projected_cash_value_field        = "#projected_cash_value2"
    // var ira_projected_retirement_income_field = "#projected_annual_tax-Free_retirementincome2"
    // var ira_percentage_of_goal_field          = "#ira_percentage_of_goal"
    // var ira_total_contrib_field               = "#OngoingContributions"

    // Constants
    var current_age = hardenNumber(jQuery(ageText).val());
    var retirement_age = hardenNumber(jQuery(retirementText).val());
    var lump_sum = hardenNumber(jQuery(lumpSumText).val());
    var amount = hardenNumber(jQuery(monthlyContribText).val());
    var desiredRetirementIncome = hardenNumber(
      jQuery(desired_retierment_income).val()
    );
    var lump_amount = lump_sum / 2;
    // var ira_assumed_growth_rate = hardenNumber(jQuery(ira_assumed_growth_rate_field).text());
    // var ira_annual_expense_rate = hardenNumber(jQuery(ira_annual_expense_rate_field).text());

    // Ensure current age is greater than retirement age
    if (current_age > retirement_age) {
      retirement_age = current_age;
    }

    // Calculate some variables for later use
    var age = setAgeForRatios(current_age);
    var years_to_contribute = retirement_age - current_age;
    // All contributions are monthly
    amount *= 12;
    var error_zero_percent = 0.0;

    // Total contributions
    var contributions = checkNaN(years_to_contribute * amount + +lump_sum);

    // MPI leverage
    var leverage = checkNaN(amount * ratios.leverage[age][years_to_contribute]);
    var lump_leverage = checkNaN(
      lump_amount * lumpRatios.leverage[age][years_to_contribute]
    );
    var total_leverage = leverage + lump_leverage;

    // Cash value
    var cash_value = checkNaN(
      amount * ratios.cash_value[age][years_to_contribute] * 0.96875
    );
    var lump_cash_value = checkNaN(
      lump_amount * lumpRatios.cash_value[age][years_to_contribute] * 0.96875
    );
    var total_cash_value = cash_value + lump_cash_value;

    // Annual income
    var annual_income = checkNaN(
      amount * ratios.income[age][years_to_contribute] * 0.96875
    );
    var lump_annual_income = checkNaN(
      lump_amount * lumpRatios.income[age][years_to_contribute] * 0.96875
    );
    var total_annual_income = Math.round(annual_income + lump_annual_income);

    // Intial Death Benefit
    var initial_db =
      checkNaN(amount + +lump_sum / 2) * male_preferred_plus[age];
    if (initial_db < 100000) {
      initial_db = 100000;
    }

    // First year contributions
    var first_year_contrib = checkNaN(+lump_amount + amount);

    // Contributions without lump sum
    var third_year_contrib = checkNaN(amount);

    // Esimated Spendable Retirement Income (11/21/2020)
    var total_spendable = checkNaN(
      (annual_income + lump_annual_income) * (90 - retirement_age)
    );

    // Total MPI Account Value (12/18/2020)
    var total_mpi_acct_val = checkNaN(total_cash_value + total_leverage);

    var annual_income_output = document.getElementById(
      "AnnualRetirementIncome"
    );
    var cash_value_output = document.getElementById("CashValue");
    var mpi_leverage_output = document.getElementById("MPIRELOC");
    var projected_contributions = document.getElementById("TotalContributions");
    var total_mpi_acct_val_output = document.getElementById("TotalMPI");
    var percentage_of_goal_mpi_output =
      document.getElementById("MPIPercentage");
    var percentage_of_goal_ira_output =
      document.getElementById("RothPercentage");
    var initial_db_output = document.getElementById("ilia");
    var first_year_contrib_output = document.getElementById("Contributions");
    var third_year_contrib_output =
      document.getElementById("Year3Contributions");
    var estimated_spendable = document.getElementById("EstimatedSpendable");
    // var ira_projected_retirement_income_field = document.getElementById(
    //   "IRARetirementIncome"
    // );
    // var ira_projected_cash_value_field = document.getElementById(
    //   "IRAEstimatedSpendable"
    // );
    // var ira_percentage_of_goal_field = document.getElementById("IRAPercentage");
    var roth_total_output = document.getElementById("RothTotal");
    var roth_monthly_output = document.getElementById("RothMonthly");

    jQuery(document).ready(function () {
      jQuery(first_year_contrib_output).val(
        "$" + first_year_contrib.toLocaleString("en-us")
      );
      jQuery(third_year_contrib_output).val(
        "$" + third_year_contrib.toLocaleString("en-us")
      );
      jQuery(annual_income_output).val(
        "$" + total_annual_income.toLocaleString("en-us")
      );
      jQuery(roth_monthly_output).val(
        "$" + total_annual_income.toLocaleString("en-us")
      );

      jQuery(cash_value_output).val(
        "$" + total_cash_value.toLocaleString("en-us")
      );
      jQuery(mpi_leverage_output).val(
        "$" + total_leverage.toLocaleString("en-us")
      );
      jQuery(projected_contributions).val(
        "$" + contributions.toLocaleString("en-us")
      );
      jQuery(initial_db_output).val("$" + initial_db.toLocaleString("en-us"));
      jQuery(estimated_spendable).val(
        "$" + total_spendable.toLocaleString("en-us")
      );
      jQuery(total_mpi_acct_val_output).val(
        "$" + total_mpi_acct_val.toLocaleString("en-us")
      );
      jQuery(percentage_of_goal_mpi_output).val(
        percentage_of_goal_mpi.toLocaleString("en-us") + "%"
      );
      jQuery(percentage_of_goal_ira_output).val(
        percentage_of_goal_ira.toLocaleString("en-us") + "%"
      );
      // jQuery(ira_total_contrib_field).val("$" + contributions.toLocaleString("en-us"));
      //   jQuery(ira_projected_cash_value_field).val(
      //     "$" + total_ira_cash.toLocaleString("en-us")
      //   );
      //   jQuery(ira_percentage_of_goal_field).val(
      //     "$" + percentage_of_goal_ira.toLocaleString("en-us") + "%"
      //   );
      //   jQuery(ira_projected_retirement_income_field).val(
      //     "$" + ira_income.toLocaleString("en-us")
      //   );
      jQuery(roth_total_output).val("$" + rothTotal.toLocaleString("en-us"));
      jQuery(roth_monthly_output).val(
        "$" + rothMonthly.toLocaleString("en-us")
      );
    });

    // // IRA Cash value
    // ira_assumed_growth_rate = ira_assumed_growth_rate * 0.1;
    // ira_annual_expense_rate = ira_annual_expense_rate * 0.01;
    // var ira_cash = ira_calc(
    //   amount,
    //   ira_assumed_growth_rate,
    //   ira_annual_expense_rate,
    //   0,
    //   0,
    //   0,
    //   years_to_contribute - 1
    // );
    // var ira_cash_lump = ira_calc_lump(
    //   lump_amount,
    //   ira_assumed_growth_rate,
    //   ira_annual_expense_rate,
    //   0,
    //   0,
    //   0,
    //   years_to_contribute - 1,
    //   0
    // );
    // var total_ira_cash = Math.floor(checkNaN(ira_cash + ira_cash_lump));
    // var ira_income = Math.floor(total_ira_cash * 0.04);
    // Roth Stuff
    const principal = amount;
    // const principal = 5000
    // const time = 10;
    const time = Math.abs(retirement_age - current_age);
    const timeLeft = 90 - retirement_age;
    const rate = 0.01;
    const n = 12;
    let total = 0;

    const rothValue = (p, t, r, n) => {
      const amount = p * Math.pow(1 + r / n, n * t);
      const interest = amount - p;
      return interest;
    };
    for (let i = 0; i < time; i++) {
      total = rothValue(principal, time, rate, n) + total;
    }
    console.log(rothValue(principal, time, rate, n));
    console.log(total + lump_sum);
    const rothTotal = total + lump_sum;
    const rothMonthly = Math.floor(rothTotal / timeLeft);

    // Percentage of goals
    var percentage_of_goal_mpi, percentage_of_goal_ira;
    if (desiredRetirementIncome === 0) {
      percentage_of_goal_mpi = error_zero_percent;
      percentage_of_goal_ira = error_zero_percent;
    } else {
      percentage_of_goal_mpi = checkNaN(
        (annual_income / desiredRetirementIncome) * 100
      );

      console.log(desiredRetirementIncome);

      percentage_of_goal_ira = checkNaN(
        (rothMonthly / desiredRetirementIncome) * 100
      );
      percentage_of_goal_mpi = Math.round(percentage_of_goal_mpi * 100) / 100;
      //   percentage_of_goal_ira = checkNaN(
      //     (ira_income / desired_retierment_income) * 100
      //   );
      percentage_of_goal_ira = Math.round(percentage_of_goal_ira * 100) / 100;
    }

    // jQuery(document).ready(function () {
    //   var lump_sum_over_24 = Math.round((lump_amount / 24) * 100) / 100;
    // });
  }

  var form = document.querySelector("form");
  if (form) {
    form.addEventListener("change", calculate());
  }

  return (
    <Container className="calcBackground">
      <Row style={{ marginTop: "3%", marginBottom: "1%" }}>
        <Col sm={0} md={4} />
        <Col sm={12} md={8}>
          <h1
            style={{
              color: "white",
              textShadow: "1px 1px black",
              marginLeft: "auto",
              marginRight: "auto",
              fontWeight: "900",
            }}
          >
            SEE WHAT SECURE COMPOUND
            <br />
            INTEREST CAN DO FOR YOUR RETIREMENT
          </h1>
        </Col>
      </Row>
      <Row style={{ marginBottom: "3%" }}>
        <Col sm={0} md={4}></Col>
        <Col sm={12} md={8}>
          <Container>
            <Form>
              <Container style={{ paddingTop: "5px", paddingBottom: "5px" }}>
                <Row>
                  {/* <!-- Inputs --> */}
                  <Col sm={12} md={4} className="mx-auto fieldset1">
                    <fieldset>
                      <div className="fields-wrapper">
                        {/* <!-- Current Age --> */}
                        <div
                          className="form-group"
                          style={{ textAlign: "left" }}
                        >
                          <label
                            className="control-label"
                            style={{
                              color: "white",
                              textShadow: "1px 1px black",
                              fontWeight: "500",
                            }}
                          >
                            Current Age
                          </label>
                          <input
                            style={{ width: "100%" }}
                            type="number"
                            id="current_age"
                            name="current_age"
                            placeholder=""
                            onChange={calculate}
                            className="form-control ccm-input-text"
                          />
                        </div>

                        {/* <!-- Desired Retirement Age --> */}
                        <div className="form-group">
                          <label
                            className="control-label"
                            htmlFor="desired_age"
                            style={{
                              color: "white",
                              textShadow: "1px 1px black",
                              fontWeight: "500",
                            }}
                          >
                            Desired Retirement Age
                          </label>
                          <input
                            style={{ width: "100%" }}
                            type="number"
                            id="desired_age"
                            name="desired_age"
                            onChange={calculate}
                            className="form-control ccm-input-email"
                          />
                        </div>
                        {/* Desired Retirement Income */}

                        <div className="form-group">
                          <label
                            className="control-label"
                            htmlFor="desired_retirement"
                            style={{
                              color: "white",
                              textShadow: "1px 1px black",
                              fontWeight: "500",
                            }}
                          >
                            Desired Retirement Income
                          </label>
                          <input
                            style={{
                              width: "100%",
                            }}
                            type="number"
                            id="desired_retirement"
                            name="desired_retirement"
                            placeholder=""
                            onChange={calculate}
                            className="form-control ccm-input-text moneyz"
                          />
                        </div>

                        {/* <!-- Lump Sum --> */}
                        <div className="form-group">
                          <label
                            className="control-label"
                            htmlFor="LumpSum"
                            style={{
                              color: "white",
                              textShadow: "1px 1px black",
                              fontWeight: "500",
                            }}
                          >
                            Lump Sum
                          </label>
                          <input
                            style={{ width: "100%" }}
                            type="number"
                            id="LumpSum"
                            name="LumpSum"
                            placeholder=""
                            onChange={calculate}
                            className="form-control ccm-input-text"
                          />
                        </div>

                        {/* <!-- Ongoing Contributions --> */}
                        <div className="form-group">
                          <label
                            className="control-label"
                            htmlFor="OngoingContributions"
                            style={{
                              color: "white",
                              textShadow: "1px 1px black",
                              fontWeight: "500",
                            }}
                          >
                            Ongoing Contributions
                          </label>
                          <input
                            style={{ width: "100%" }}
                            type="number"
                            id="OngoingContributions"
                            name="OngoingContributions"
                            onChange={calculate}
                            className="form-control ccm-input-tel"
                          />
                        </div>

                        {/* <!-- Year 1-2 Contributions --> */}
                        {/* <div className="form-group">
                          <label className="control-label" htmlFor="Contributions">
                            Year 1-2 Contributions
                          </label>
                          <input
                            type="text"
                            id="Contributions"
                            name="Contributions"
                            placeholder=""
                            className="form-control ccm-input-text"
                            readOnly
                          />
                          <span className="lightTxt">
                            Lump Sum/24 + Monthly Contribution
                          </span>
                        </div> */}

                        {/* <!-- Year 3+ Contributions --> */}
                        {/* <div className="form-group">
                          <label
                            className="control-label"
                            htmlFor="Year3Contributions"
                          >
                            Year 3+ Contributions
                          </label>
                          <input
                            type="text"
                            id="Year3Contributions"
                            name="Year3Contributions"
                            placeholder=""
                            className="form-control ccm-input-text"
                            readOnly
                          />
                        </div> */}
                      </div>
                    </fieldset>
                  </Col>
                  {/* <!-- Outputs --> */}
                  <Col
                    sm={12}
                    md={8}
                    style={{
                      marginTop: "5px",
                      paddingLeft: "2%",
                      paddingRight: "2%",
                    }}
                  >
                    <fieldset>
                      <div className="fields-wrapper">
                        {/* <!-- Annual Retirement Income --> */}
                        {/* <div className="form-group maincalcualtion"> */}
                        <div
                          className="container"
                          style={{
                            backgroundColor: props.agent.primaryColor,
                            paddingLeft: "0.1rem",
                            paddingRight: "0.1rem",
                            paddingBottom: "0.1rem",
                            // border: "1px solid black",
                            alignContent: "center",
                            borderRadius: "5px",
                          }}
                        >
                          <div
                            className="row"
                            style={{
                              marginBottom: "0px",
                              paddingBottom: "0px",
                            }}
                          >
                            <h3
                              style={{
                                textAlign: "center",
                                // borderBottom: "1px solid black",
                                width: "cover",
                                marginBottom: "0px",
                                paddingBottom: "0px",
                                color: props.agent.textColor ? props.agent.textColor : "black",
                                borderRadius: "5px 5px 0px 0px",
                                fontWeight: "700",
                                textShadow: "1px 1px black"
                              }}
                            >
                              Side by Side Comparison
                            </h3>
                          </div>
                          <div
                            className="row"
                            style={{
                              marginLeft: "auto",
                              marginRight: "auto",
                              marginTop: "0px",
                              marginBottom: "0px",
                            }}
                          >
                            <div
                              className="col"
                              style={{
                                backgroundColor: props.agent.secondaryColor,
                              }}
                            >
                              <h3
                                style={{
                                  textAlign: "center",
                                  fontSize: "125%",
                                  paddingTop: "4px",
                                  fontWeight: "700",
                                  color: "white",
                                  textShadow: "1px 1px black",
                                }}
                              >
                                MPI® PLAN
                              </h3>
                            </div>
                            <div
                              className="col"
                              style={{
                                backgroundColor: "white",
                                marginTop: "0px",
                                marginBottom: "0px",
                                paddingTop: "0px",
                                paddingBottom: "0px",
                              }}
                            >
                              <h3
                                style={{
                                  textAlign: "center",
                                  // color:'white',
                                  fontSize: "125%",
                                  fontWeight: "700",
                                  paddingTop: "4px",
                                }}
                              >
                                ROTH IRA/401K
                              </h3>
                            </div>
                          </div>
                          <div
                            className="container"
                            style={{
                              backgroundColor: props.agent.secondaryColor,
                              paddingLeft: "0px",
                              paddingRight: "0px",
                              marginTop: "0px",
                            }}
                          >
                            <div
                              className="row"
                              style={{
                                backgroundColor: props.agent.primaryColor,
                                paddingLeft: "0px",
                                paddingRight: "0px",
                                marginLeft: "0px",
                                marginRight: "0px",
                                marginTop: "0px",
                              }}
                            >
                              <h4
                                style={{
                                  textAlign: "center",
                                  fontSize: "90%",
                                  paddingLeft: "0px",
                                  paddingRight: "0px",
                                  paddingTop: "4px",
                                  marginLeft: "0px",
                                  marginTop: "0px",
                                  marginRight: "0px",
                                  alignContent: "center",
                                  color: props.agent.textColor ? props.agent.textColor : "black",
                                  fontWeight: "500",
                                  textShadow: "1px 1px black"
                                }}
                              >
                                ESTIMATED ANNUAL TAX-FREE RETIREMENT INCOME
                              </h4>
                            </div>
                            <div
                              className="row"
                              style={{
                                width: "100%",
                                marginLeft: "0px",
                                marginRight: "0px",
                                paddingLeft: "0px",
                                paddingRight: "0px",
                                fontSize: "125%",
                              }}
                            >
                              <div className="col">
                                <input
                                  style={{
                                    width: "100%",
                                    margin: "0px",
                                    padding: "0px",
                                    border: "none",
                                    backgroundColor: props.agent.secondaryColor,
                                    color: "white",
                                    textShadow: "1px 1px black",
                                  }}
                                  type="text"
                                  id="AnnualRetirementIncome"
                                  name="AnnualRetirementIncome"
                                  value=""
                                  placeholder=""
                                  className="form-control ccm-input-text"
                                  readOnly
                                />
                              </div>
                              <div
                                className="col"
                                style={{
                                  backgroundColor: "white",
                                }}
                              >
                                <input
                                  style={{
                                    width: "100%",
                                    margin: "0px",
                                    padding: "0px",
                                    border: "none",
                                    backgroundColor: "white",
                                  }}
                                  type="text"
                                  id="RothMonthly"
                                  name="RothMonthly"
                                  value=""
                                  placeholder=""
                                  className="form-control ccm-input-text"
                                  readOnly
                                />
                              </div>
                            </div>
                          </div>
                        </div>
                        <Container>
                          <Row>
                            <Row></Row>
                            <Col xs={4}>
                              <input
                                style={{
                                  width: "100%",
                                  marginLeft: "0px",
                                  marginRight: "0px",
                                  paddingLeft: "0px",
                                  paddingRight: "0px",
                                  border: "none",
                                  textAlign: "center",
                                  fontSize: "125%",
                                  backgroundColor: "rgb(0,0,0,0)",
                                  fontWeight: "900",
                                  color: "white",
                                  textShadow: "1px 1px black",
                                  // color:'white'
                                }}
                                type="text"
                                id="MPIPercentage"
                                name="MPIPercentage"
                                value="0%"
                                className="form-control ccm-input-text"
                                readOnly
                              />
                            </Col>
                            <Col xs={4} style={{ margin: "auto" }}>
                              <small
                                style={{
                                  color: "white",
                                  textShadow: "1px 1px black",
                                  fontSize: "100%",
                                  margin: "auto",
                                  fontWeight: "900",
                                }}
                              >
                                Percentage of Goal
                              </small>
                            </Col>
                            <Col xs={4}>
                              <input
                                style={{
                                  width: "100%",
                                  marginLeft: "0px",
                                  marginRight: "0px",
                                  paddingLeft: "0px",
                                  paddingRight: "0px",
                                  border: "none",
                                  textAlign: "center",
                                  fontSize: "125%",
                                  backgroundColor: "rgb(0,0,0,0)",
                                  fontWeight: "900",
                                  color: "white",
                                  textShadow: "1px 1px black",
                                  // color:'white'
                                }}
                                type="text"
                                id="RothPercentage"
                                name="RothPercentage"
                                value="0%"
                                className="form-control ccm-input-text"
                                readOnly
                              />
                            </Col>
                          </Row>
                          <Row>
                            <Button
                              href="/videoseries"
                              style={{backgroundColor: props.agent.primaryColor, textShadow: '1px 1px black', color: props.agent.textColor ? props.agent.textColor : "black",}}
                              // onClick={() => switchShowMore()}
                            >
                              See Full Results
                            </Button>
                          </Row>
                        </Container>
                        {/* </div> */}
                      </div>
                    </fieldset>
                    <p
                      style={{
                        marginTop: "10px",
                        fontSize: "12px",
                        color: "white",
                        textShadow: "1px 1px black",
                        fontWeight: "500",
                      }}
                    >
                      *DISCLAIMERS: AMOUNTS SHOWN IN THIS CALCULATION ARE
                      ESTIMATES ONLY AND NOT GUARANTEED IN ANY WAY. ESTIMATES
                      ARE AVERAGE ANNUAL RETURNS OF 6.4% AND LOAN INTEREST OF
                      4%. COSTS OF INSURANCE AND POLICY EXPENSES ARE TAKEN FROM
                      AN NAIC APPROVED ILLUSTRATION AND ARE BASED ON A SIMILARLY
                      AGED MALE AT A PREFERRED HEALTH RATING. ESTIMATED CASH
                      VALUE AND INCOME RESULTS MAY VARY BASED ON ACTUAL GENDER,
                      AGE, AND APPROVED HEALTH RATING. ROTH IRA PROJECTIONS ARE
                      ASSUMED 10% MARKET GROWTH WITH AN ASSUMED EXPENSE RATIO OF
                      1% ALL-IN FEES. COMPOUND RESULTS ARE CALCULATED ON AN
                      ANNUAL BASIS. ROTH IRA PROJECTED INCOME BASED OFF THE 4%
                      RULE.
                    </p>
                  </Col>
                </Row>
              </Container>
            </Form>
          </Container>
        </Col>
      </Row>
    </Container>
  );
};
